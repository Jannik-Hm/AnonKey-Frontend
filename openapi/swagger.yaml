openapi: 3.0.1
info:
  title: AnonKey-Backend
  version: '1.0'
paths:
  /authentication/login:
    post:
      tags:
        - Authentication
      summary: Authenticates the user and returns an access token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationLoginRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationLoginResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /authentication/changePassword:
    put:
      tags:
        - Authentication
      summary: Changes a users password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationChangePasswordRequestBody'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/create:
    post:
      tags:
        - Credentials
      summary: Creates a new credential object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsCreateRequestBody'
        required: true
      responses:
        '200':
          description: OK
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/get:
    get:
      tags:
        - Credentials
      summary: Gets information on a credential object.
      parameters:
        - name: credentialUuid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsGetResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/getAll:
    get:
      tags:
        - Credentials
      summary: Gets all available credential objects for this user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsGetAllResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/update:
    put:
      tags:
        - Credentials
      summary: Updates a credential object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsUpdateRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsUpdateResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/soft-delete:
    put:
      tags:
        - Credentials
      summary: SoftDeletes an existing credential object.
      parameters:
        - name: credentialUuid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/soft-undelete:
    put:
      tags:
        - Credentials
      summary: SoftUndeletes an existing credential object.
      parameters:
        - name: credentialUuid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /credentials/delete:
    delete:
      tags:
        - Credentials
      summary: Deletes an existing credential object.
      parameters:
        - name: credentialUuid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /folders/create:
    post:
      tags:
        - Folders
      summary: Creates a new folder.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoldersCreateRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersCreateResponseBody'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /folders/get:
    get:
      tags:
        - Folders
      summary: Gets information on an existing folder.
      parameters:
        - name: folderUuid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersGetResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /folders/getAll:
    get:
      tags:
        - Folders
      summary: Gets all folders for a user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersGetAllResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /folders/update:
    put:
      tags:
        - Folders
      summary: Updates an existing folder object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoldersUpdateRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersUpdateResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /folders/delete:
    delete:
      tags:
        - Folders
      summary: Deletes an existing folder.
      parameters:
        - name: folderUuid
          in: query
          required: true
          schema:
            type: string
        - name: recursive
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /service/ping:
    get:
      tags:
        - Service
      summary: Checks the connection to the server.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /user/create:
    post:
      tags:
        - Users
      summary: Creates a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateRequestBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersCreateResponseBody'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /user/get:
    get:
      tags:
        - Users
      summary: Gets information for an existing user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /user/update:
    put:
      tags:
        - Users
      summary: Updates an existing user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequestBody'
        required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /user/delete:
    delete:
      tags:
        - Users
      summary: Deletes an existing user.
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
  /uuid/new:
    get:
      tags:
        - UUID
      summary: Returns a new UUID for several endpoints.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseBody'
components:
  schemas:
    AuthenticationChangePasswordRequestBody:
      type: object
      properties:
        kdfResultOldPassword:
          type: string
          description: The KDF result of the old password.
          nullable: true
        kdfResultNewPassword:
          type: string
          description: The new KDF result that should be used from now on.
          nullable: true
      additionalProperties: false
      description: The body of a password change request.
    AuthenticationLoginRequestBody:
      type: object
      properties:
        userName:
          type: string
          description: The name of the user to log in.
          nullable: true
        kdfPasswordResult:
          type: string
          description: The result of the KDF function of the user's password.
          nullable: true
      additionalProperties: false
      description: The body of a login request.
    AuthenticationLoginResponseBody:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/AuthenticationLoginToken'
        refreshToken:
          $ref: '#/components/schemas/AuthenticationLoginToken'
      additionalProperties: false
      description: The body of the response to a login request.
    AuthenticationLoginToken:
      type: object
      properties:
        token:
          type: string
          description: The token that can be used for authentication.
          nullable: true
        tokenType:
          type: string
          description: 'The type of the token, either "AccessToken" or "RefreshToken"'
          nullable: true
        expiryTimestamp:
          type: integer
          description: The time in seconds the token expires on.
          format: int64
      additionalProperties: false
      description: Represents a token object in the response to a Login request
    CredentialsCreateCredential:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the credential.
          nullable: true
        password:
          type: string
          description: The encrypted password to store.
          nullable: true
        passwordSalt:
          type: string
          description: The salt of the stored password.
          nullable: true
        username:
          type: string
          description: The encrypted username to store.
          nullable: true
        usernameSalt:
          type: string
          description: The salt of the encrypted username.
          nullable: true
        websiteUrl:
          type: string
          description: The URL of the website the credential belongs to.
          nullable: true
        websiteUrlSalt:
          type: string
          description: The WebsiteUrlSalt of the credetial
          nullable: true
        note:
          type: string
          description: A note attached to the credential.
          nullable: true
        noteSalt:
          type: string
          description: The NoteSalt  of the credetial
          nullable: true
        displayName:
          type: string
          description: The display name of the credential..
          nullable: true
        displayNameSalt:
          type: string
          description: The DisplayNameSalt of the credetial
          nullable: true
        folderUuid:
          type: string
          description: "The UUID of the folder the credential is in.\r\nUse NULL for no folder."
          nullable: true
      additionalProperties: false
      description: The credential object inside a credential create request.
    CredentialsCreateRequestBody:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/CredentialsCreateCredential'
      additionalProperties: false
      description: The body of a credential create request.
    CredentialsGetAllCredential:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the credential.
          nullable: true
        password:
          type: string
          description: The encrypted password to store.
          nullable: true
        passwordSalt:
          type: string
          description: The salt of the stored password.
          nullable: true
        username:
          type: string
          description: The encrypted username to store.
          nullable: true
        usernameSalt:
          type: string
          description: The salt of the encrypted username.
          nullable: true
        websiteUrl:
          type: string
          description: The URL of the website the credential belongs to.
          nullable: true
        websiteUrlSalt:
          type: string
          description: The WebsiteUrlSalt of the credetial
          nullable: true
        note:
          type: string
          description: A note attached to the credential.
          nullable: true
        noteSalt:
          type: string
          description: The NoteSalt  of the credetial
          nullable: true
        displayName:
          type: string
          description: The display name of the credential..
          nullable: true
        displayNameSalt:
          type: string
          description: The DisplayNameSalt of the credetial
          nullable: true
        folderUuid:
          type: string
          description: "The UUID of the folder the credential is in.\r\nUse NULL for no folder."
          nullable: true
        createdTimestamp:
          type: integer
          description: The unix timestamp at which the credential was created.
          format: int64
        changedTimestamp:
          type: integer
          description: The unix timestamp at which the credential was last edited.
          format: int64
        deletedTimestamp:
          type: integer
          description: The unix timestamp the credential was deleted at.
          format: int64
          nullable: true
      additionalProperties: false
      description: The credentials inside the list returned by a get all credentials request.
    CredentialsGetAllResponseBody:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/CredentialsGetAllCredential'
          description: A list of credentials associated with the user.
          nullable: true
      additionalProperties: false
      description: Response to a get all credentials request.
    CredentialsGetCredential:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the credential.
          nullable: true
        password:
          type: string
          description: The encrypted password to store.
          nullable: true
        passwordSalt:
          type: string
          description: The salt of the stored password.
          nullable: true
        username:
          type: string
          description: The encrypted username to store.
          nullable: true
        usernameSalt:
          type: string
          description: The salt of the encrypted username.
          nullable: true
        websiteUrl:
          type: string
          description: The URL of the website the credential belongs to.
          nullable: true
        websiteUrlSalt:
          type: string
          description: The WebsiteUrlSalt of the credetial
          nullable: true
        note:
          type: string
          description: A note attached to the credential.
          nullable: true
        noteSalt:
          type: string
          description: The NoteSalt  of the credetial
          nullable: true
        displayName:
          type: string
          description: The display name of the credential..
          nullable: true
        displayNameSalt:
          type: string
          description: The DisplayNameSalt of the credetial
          nullable: true
        folderUuid:
          type: string
          description: "The UUID of the folder the credential is in.\r\nUse NULL for no folder."
          nullable: true
        createdTimestamp:
          type: integer
          description: The unix timestamp at which the credential was created.
          format: int64
        changedTimestamp:
          type: integer
          description: The unix timestamp at which the credential was last edited.
          format: int64
        deletedTimestamp:
          type: integer
          description: The unix timestamp the credential was deleted at.
          format: int64
          nullable: true
      additionalProperties: false
      description: Credential in a credential get response.
    CredentialsGetResponseBody:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/CredentialsGetCredential'
      additionalProperties: false
      description: The body of a response to a credential get request.
    CredentialsUpdateCredentialRequest:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the credential.
          nullable: true
        password:
          type: string
          description: The encrypted password to store.
          nullable: true
        passwordSalt:
          type: string
          description: The salt of the stored password.
          nullable: true
        username:
          type: string
          description: The encrypted username to store.
          nullable: true
        usernameSalt:
          type: string
          description: The salt of the encrypted username.
          nullable: true
        websiteUrl:
          type: string
          description: The URL of the website the credential belongs to.
          nullable: true
        websiteUrlSalt:
          type: string
          description: The WebsiteUrlSalt of the credetial
          nullable: true
        note:
          type: string
          description: A note attached to the credential.
          nullable: true
        noteSalt:
          type: string
          description: The NoteSalt  of the credetial
          nullable: true
        displayName:
          type: string
          description: The display name of the credential..
          nullable: true
        displayNameSalt:
          type: string
          description: The DisplayNameSalt of the credetial
          nullable: true
        folderUuid:
          type: string
          description: "The UUID of the folder the credential is in.\r\nUse NULL for no folder."
          nullable: true
      additionalProperties: false
      description: The credential inside a credential update request.
    CredentialsUpdateCredentialResponse:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the credential.
          nullable: true
        password:
          type: string
          description: The encrypted password to store.
          nullable: true
        passwordSalt:
          type: string
          description: The salt of the stored password.
          nullable: true
        username:
          type: string
          description: The encrypted username to store.
          nullable: true
        usernameSalt:
          type: string
          description: The salt of the encrypted username.
          nullable: true
        websiteUrl:
          type: string
          description: The URL of the website the credential belongs to.
          nullable: true
        websiteUrlSalt:
          type: string
          description: The WebsiteUrlSalt of the credetial
          nullable: true
        note:
          type: string
          description: A note attached to the credential.
          nullable: true
        noteSalt:
          type: string
          description: The NoteSalt  of the credetial
          nullable: true
        displayName:
          type: string
          description: The display name of the credential..
          nullable: true
        displayNameSalt:
          type: string
          description: The DisplayNameSalt of the credetial
          nullable: true
        folderUuid:
          type: string
          description: "The UUID of the folder the credential is in.\r\nUse NULL for no folder."
          nullable: true
        createdTimestamp:
          type: integer
          description: The unix timestamp at which the credential was created.
          format: int64
        changedTimestamp:
          type: integer
          description: The unix timestamp at which the credential was last edited.
          format: int64
        deletedTimestamp:
          type: integer
          description: The unix timestamp the credential was deleted at.
          format: int64
          nullable: true
      additionalProperties: false
      description: The response to a credential update operation.
    CredentialsUpdateRequestBody:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/CredentialsUpdateCredentialRequest'
      additionalProperties: false
      description: The body of a credential update request.
    CredentialsUpdateResponseBody:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/CredentialsUpdateCredentialResponse'
      additionalProperties: false
      description: The body of a credential update response.
    ErrorResponseBody:
      type: object
      properties:
        message:
          type: string
          description: The short message describing the error.
          nullable: true
        detail:
          type: string
          description: A detailed explanation detailing the error.
          nullable: true
      additionalProperties: false
      description: Structure of an error message.
    FoldersCreateFolder:
      type: object
      properties:
        name:
          type: string
          description: Name of the new folder.
          nullable: true
        icon:
          type: integer
          description: Icon of the new folder.
          format: int32
      additionalProperties: false
      description: Folder contained inside a create folder operation.
    FoldersCreateRequestBody:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/FoldersCreateFolder'
      additionalProperties: false
      description: Body of a folder create request.
    FoldersCreateResponseBody:
      type: object
      properties:
        folderUuid:
          type: string
          description: The UUID of the newly created folder.
          nullable: true
      additionalProperties: false
      description: Response to a folder create request.
    FoldersGetAllFolder:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the folder.
          nullable: true
        name:
          type: string
          description: Name of the folder.
          nullable: true
        icon:
          type: integer
          description: Icon of the folder.
          format: int32
      additionalProperties: false
      description: Folder in a response to a get all folders request.
    FoldersGetAllResponseBody:
      type: object
      properties:
        folder:
          type: array
          items:
            $ref: '#/components/schemas/FoldersGetAllFolder'
          description: Folders
          nullable: true
      additionalProperties: false
      description: Response to a get all folders request.
    FoldersGetFolder:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the folder.
          nullable: true
        name:
          type: string
          description: Name of the folder.
          nullable: true
        icon:
          type: integer
          description: Icon of the folder.
          format: int32
      additionalProperties: false
      description: Folder in a folder get response.
    FoldersGetResponseBody:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/FoldersGetFolder'
      additionalProperties: false
      description: Response to a folder get request.
    FoldersUpdateFolder:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the folder.
          nullable: true
        name:
          type: string
          description: Name of the folder.
          nullable: true
        icon:
          type: integer
          description: Icon of the folder.
          format: int32
      additionalProperties: false
      description: Folder returned by the update request.
    FoldersUpdateRequestBody:
      type: object
      properties:
        folder:
          $ref: '#/components/schemas/FoldersUpdateFolder'
      additionalProperties: false
      description: The body of a folder update request.
    FoldersUpdateResponseBody:
      type: object
      properties:
        folderUuid:
          type: string
          description: UUID of the updated folder.
          nullable: true
      additionalProperties: false
      description: Body of a response to a folder update request.
    UsersCreateRequestBody:
      type: object
      properties:
        userName:
          type: string
          description: Name of the user to be created.
          nullable: true
        userDisplayName:
          type: string
          description: Display name of the user to be created.
          nullable: true
        kdfPasswordResult:
          type: string
          description: Result of the KDF for the user password.
          nullable: true
      additionalProperties: false
      description: Body of a user create request.
    UsersCreateResponseBody:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/UsersCreateResponseToken'
        refreshToken:
          $ref: '#/components/schemas/UsersCreateResponseToken'
      additionalProperties: false
      description: Body of a response to a user create request.
    UsersCreateResponseToken:
      type: object
      properties:
        token:
          type: string
          description: The token that can be used for authentication.
          nullable: true
        tokenType:
          type: string
          description: 'The type of the token, either "AccessToken" or "RefreshToken"'
          nullable: true
        expiryTimestamp:
          type: integer
          description: The time in seconds the token expires on.
          format: int64
      additionalProperties: false
      description: Represents a token object in the response to a user UsersCreateResponseToken request
    UsersGetResponseBody:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UsersGetUser'
      additionalProperties: false
      description: Response body of a user get request.
    UsersGetUser:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the user.
          nullable: true
      additionalProperties: false
      description: User requested.
    UsersUpdateRequestBody:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UsersUpdateUser'
      additionalProperties: false
      description: Body of a user update request.
    UsersUpdateUser:
      type: object
      properties:
        userName:
          type: string
          description: The username of the user to be updated.
          nullable: true
        displayName:
          type: string
          description: The new display name of the user.
          nullable: true
      additionalProperties: false
      description: User update request user.
  securitySchemes:
    Bearer:
      type: apiKey
      description: JWT Authorization header using the Bearer scheme.
      name: Authorization
      in: header
security:
  - Bearer: [ ]